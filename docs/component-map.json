{
  "version": "2.0-OS",
  "updated": "2025-01-20",
  "architecture": "feature-based-hybrid",
  "components": {
    "substrate": {
      "type": "foundation",
      "purpose": "Base functionality and shared components for MCP servers",
      "status": "IMPLEMENTED",
      "features": {
        "documentation": {
          "tools": ["substrate", "substrate_documentation", "substrate_list_docs"],
          "purpose": "System and component documentation"
        },
        "references": {
          "tools": ["substrate_create_ref", "substrate_read_ref", "substrate_update_ref", "substrate_delete_ref", "substrate_list_refs"],
          "purpose": "Reference content management"
        },
        "execution": {
          "tools": ["substrate_execute"],
          "purpose": "Pattern execution with references"
        },
        "workflow_navigation": {
          "tools": ["substrate_show_workflows", "substrate_workflow_guide", "substrate_suggest_next"],
          "purpose": "Guided workflow system"
        }
      },
      "shared_components": [
        "ModelRegistry - Load models from .env",
        "ResponseBuilder - Standardized responses",
        "ReferenceManager - Content storage",
        "PromptLoader - YAML prompt loading",
        "ClearHermes - API client abstraction"
      ]
    },
    "akab": {
      "type": "example_implementation",
      "purpose": "A/B testing framework demonstrating feature-based architecture",
      "status": "IMPLEMENTED",
      "features": {
        "quick_compare": {
          "tools": ["akab_quick_compare"],
          "purpose": "Level 1 - Quick comparison with no blinding"
        },
        "campaigns": {
          "tools": ["akab_create_campaign", "akab_execute_campaign"],
          "purpose": "Level 2 - A/B testing with execution blinding"
        },
        "experiments": {
          "tools": ["akab_list_scrambled_models", "akab_create_experiment", "akab_reveal_experiment", "akab_diagnose_experiment"],
          "purpose": "Level 3 - Scientific experiments with triple blinding"
        },
        "reporting": {
          "tools": ["akab_list_campaigns"],
          "purpose": "Campaign and cost reporting"
        }
      },
      "demonstrates": [
        "Feature isolation",
        "YAML configuration",
        "Substrate component usage",
        "Complex state management",
        "Production-grade implementation"
      ]
    },
    "krill": {
      "type": "storage",
      "purpose": "Result storage directory structure",
      "status": "IMPLEMENTED",
      "location": "/krill/",
      "structure": {
        "campaigns/": "All campaign data by level",
        "results/": "Raw execution results",  
        "archive/": "Completed and unlocked work"
      }
    }
  },
  "architecture_patterns": {
    "feature_structure": {
      "description": "Standard feature organization",
      "pattern": "features/{feature_name}/[tool.py, handler.py, prompts.yaml]"
    },
    "yaml_configuration": {
      "description": "All prompts and patterns in YAML",
      "benefits": ["Version control friendly", "No code changes for content", "Clear separation"]
    },
    "response_format": {
      "description": "Standardized response structure",
      "fields": ["data", "metadata", "suggestions", "message"]
    },
    "self_documenting": {
      "description": "Servers respond to their own name with documentation",
      "example": "Call 'substrate' tool â†’ Get substrate documentation"
    }
  },
  "extension_guide": {
    "creating_new_mcp": {
      "steps": [
        "Use substrate shared components",
        "Follow feature-based structure",
        "Implement YAML configuration",
        "Use standard response format",
        "Document all tools"
      ]
    },
    "adding_features": {
      "steps": [
        "Create feature directory",
        "Implement handler.py",
        "Define prompts.yaml",
        "Register in tool.py",
        "Update server.py"
      ]
    }
  },
  "deployment": {
    "docker": {
      "build_context": "Always build from root directory",
      "substrate_dependency": "Copy substrate first in Dockerfile"
    },
    "configuration": {
      "models": "Via .env file using ModelRegistry",
      "environment": "Standard MCP environment variables"
    }
  }
}